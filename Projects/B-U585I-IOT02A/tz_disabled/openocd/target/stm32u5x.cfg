# script for stm32u5x family

#
# stm32u5 devices support both JTAG and SWD transports.
#
source [find target/swj-dp.tcl]
source [find mem_helper.tcl]

if { [info exists CHIPNAME] } {
	set _CHIPNAME $CHIPNAME
} else {
	set _CHIPNAME stm32u5
}

if { [info exists CONNECT_UNDER_RESET] } {
	set _CONNECT_UNDER_RESET $CONNECT_UNDER_RESET
} else {
	set _CONNECT_UNDER_RESET 0
}

if { [info exists ENABLE_LOW_POWER] } {
	set _ENABLE_LOW_POWER $ENABLE_LOW_POWER
} else {
	set _ENABLE_LOW_POWER 0
}

if { [info exists STOP_WATCHDOG] } {
	set _STOP_WATCHDOG $STOP_WATCHDOG
} else {
	set _STOP_WATCHDOG 0
}

set _ENDIAN little

# Work-area is a space in RAM used for flash programming
# By default use 64kB
if { [info exists WORKAREASIZE] } {
	set _WORKAREASIZE $WORKAREASIZE
} else {
	set _WORKAREASIZE 0x10000
}

#jtag scan chain
if { [info exists CPUTAPID] } {
	set _CPUTAPID $CPUTAPID
} else {
	if { [using_jtag] } {
		# See STM Document RM0456
		# Section 64.2.8 - corresponds to Cortex-M33
		set _CPUTAPID 0x0ba04477
	} else {
		# SWD IDCODE (single drop, arm)
		set _CPUTAPID 0x0be12477
	}
}

swj_newdap $_CHIPNAME cpu -irlen 4 -ircapture 0x1 -irmask 0xf -expected-id $_CPUTAPID

set _TARGETNAME $_CHIPNAME.cpu
dap create $_CHIPNAME.dap -chain-position $_TARGETNAME

target create $_CHIPNAME.ap0 mem_ap -dap $_CHIPNAME.dap -ap-num 0

target create $_TARGETNAME cortex_m -endian $_ENDIAN -dap $_CHIPNAME.dap -ap-num 0 -gdb-max-connections 2

tpiu create $_CHIPNAME.tpiu -dap $_CHIPNAME.dap -ap-num 0 -baseaddr 0xE0040000

# flash size will be probed
set _FLASHNAME $_CHIPNAME.flash
flash bank $_FLASHNAME stm32l4x 0x08000000 0 0 0 $_TARGETNAME

# declare secure flash bank with secure mapping
set _FLASHNAME $_CHIPNAME.flash_sec
flash bank $_FLASHNAME stm32l4x 0x0C000000 0 0 0 $_TARGETNAME

if { [info exists CLOCK_FREQ] } {
	set _CLOCK_FREQ $CLOCK_FREQ
} else {
	set _CLOCK_FREQ 4000
}
adapter speed $_CLOCK_FREQ

adapter srst delay 100
if { [using_jtag] } {
	jtag_ntrst_delay 100
}

if { ![using_hla] } {
	# if srst is not fitted use SYSRESETREQ to
	# perform a soft reset
	cortex_m reset_config sysresetreq
}

$_CHIPNAME.ap0 configure -event examine-end {
	# Enable Trace Port and Clock (uses more power)
	# DBGMCU_CR |= TRACE_EN
	mmw 0xE0044004 0x00000020 0
}

$_TARGETNAME configure -event examine-end {
global _ENABLE_LOW_POWER
global _STOP_WATCHDOG

	if { $_ENABLE_LOW_POWER == 1 } {
		# Enable debug during low power modes (uses more power)
		# DBGMCU_CR |= DBG_STANDBY | DBG_STOP
		mmw 0xE0044004 0x00000006 0
	} else {
		# Disable debug during low power modes
		# DBGMCU_CR |= ~(DBG_STANDBY | DBG_STOP)
		mmw 0xE0044004 0 0x00000006
	}
	if { $_STOP_WATCHDOG == 1 } {
		# Stop watchdog counters during halt
		# DBGMCU_APB1_FZ |= DBG_IWDG_STOP | DBG_WWDG_STOP
		mmw 0xE0044008 0x00001800 0
	} else {
		# Don't stop watchdog counters during halt
		# DBGMCU_APB1_FZ |= ~(DBG_IWDG_STOP | DBG_WWDG_STOP)
		mmw 0xE0044008 0 0x00001800
	}
}

proc ahb_ap_non_secure_access {} {
global _CHIPNAME

	# SPROT=1=Non Secure access, Priv=1
	$_CHIPNAME.dap apcsw 0x4B000000
}

proc ahb_ap_secure_access {} {
global _CHIPNAME

	# SPROT=0=Secure access, Priv=1
	$_CHIPNAME.dap apcsw 0x0B000000
}

proc is_secure {} {
	# read Debug Security Control and Status Regsiter (DSCSR) and check CDS (bit 16)
	set DSCSR [mrw 0xE000EE08]
	return [expr {[expr {$DSCSR & (1 << 16)}] != 0}]
}

proc clock_config_160_mhz {} {
	# Mcu clock is at MSI 4MHz after reset, set mcu freq at 160 MHz with PLL
	set offset [expr {[is_secure] ? 0x10000000 : 0}]

	# Enable voltage range 1 for frequency above 100 Mhz
	# RCC_AHB3ENR = PWREN
	mww [expr {0x46020C94 + $offset}] 0x00000004
	# delay for register clock enable (read back reg)
	mrw [expr {0x46020C94 + $offset}]
	# PWR_VOSR : VOS Range 1
	mmw [expr {0x4602080C + $offset}] 0x00030000 0
	# while !(PWR_VOSR & VOSRDY)
	while {!([mrw [expr {0x4602080C + $offset}]] & 0x00008000)} {}
	# FLASH_ACR : 4 WS for 160 MHz HCLK
	mww [expr {0x40022000 + $offset}] 0x00000004
	# RCC_PLL1CFGR => PLL1MBOOST=0, PLL1M=0=/1, PLL1FRACEN=0, PLL1SRC=MSI 4MHz
	#                 PLL1REN=1, PLL1RGE => VCOInputRange=PLLInputRange_4_8
	mww [expr {0x46020C28 + $offset}] 0x00040009
	# Enable EPOD Booster
	mmw [expr {0x4602080C + $offset}] 0x00040000 0
	# while !(PWR_VOSR & BOOSTRDY)
	while {!([mrw [expr {0x4602080C + $offset}]] & 0x00004000)} {}
	# RCC_PLL1DIVR => PLL1P=PLL1Q=PLL1R=000001=/2, PLL1N=0x4F=80
	# fVCO = 4 x 80 /1 = 320
	# SYSCLOCK = fVCO/PLL1R = 320/2 = 160 MHz
	mww [expr {0x46020C34 + $offset}] 0x0101024F
	# RCC_CR |= PLL1ON
	mmw [expr {0x46020C00 + $offset}] 0x01000000 0
	# while !(RCC_CR & PLL1RDY)
	while {!([mrw [expr {0x46020C00 + $offset}]] & 0x02000000)} {}
	# RCC_CFGR1 |= SW_PLL
	mmw [expr {0x46020C1C + $offset}] 0x00000003 0
	# while ((RCC_CFGR1 & SWS) != PLL)
	while {([mrw [expr {0x46020C1C + $offset}]] & 0x0C) != 0x0C} {}
}

$_TARGETNAME configure -event halted {
	if {[is_secure]} {
		echo "CPU in Secure state"
		ahb_ap_secure_access
	} else {
		echo "CPU in Non-Secure state"
		ahb_ap_non_secure_access
	}
}

$_TARGETNAME configure -event reset-init {
global _CLOCK_FREQ

	clock_config_160_mhz
	adapter speed $_CLOCK_FREQ
}

$_TARGETNAME configure -event gdb-attach {
global _TARGETNAME
global _WORKAREASIZE

	# Needed to be able to use the connect_assert_srst in reset_config
	if { $_CONNECT_UNDER_RESET == 1 } {
		reset init
	}

	# check if FLASH_OPTR.TZEN is enabled
	set FLASH_OPTR [mrw 0x40022040]

	if { [expr {[expr {$FLASH_OPTR & 0x100000}] == 0}] } {
		echo "SWAP_BANK option bit is disabled."
	} else {
		echo "SWAP_BANK option bit is enabled. Disabling to allow debugging."
		reset init
		stm32l4x option_write 0 0x40 0x0 0x100000
		stm32l4x option_load 0
		reset init
	}

	if { [expr {[expr {$FLASH_OPTR & (1 << 31)}] == 0}] } {
		echo "TZEN option bit disabled"
		ahb_ap_non_secure_access
		# Use non secure mapping
		$_TARGETNAME configure -work-area-phys 0x20000000 -work-area-size $_WORKAREASIZE -work-area-backup 1
	} else {
		echo "TZEN option bit activated"
		ahb_ap_secure_access
		# Use secure mapping
		$_TARGETNAME configure -work-area-phys 0x30000000 -work-area-size $_WORKAREASIZE -work-area-backup 1
	}
}

$_TARGETNAME configure -event gdb-detach {
	# to close connection if debug mode entered
	shutdown
}

